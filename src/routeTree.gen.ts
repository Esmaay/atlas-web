/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as MainRouteImport } from "./routes/_main";
import { Route as AuthRouteImport } from "./routes/_auth";
import { Route as MainIndexRouteImport } from "./routes/_main/index";
import { Route as AuthRegisterRouteImport } from "./routes/_auth/register";
import { Route as AuthLoginRouteImport } from "./routes/_auth/login";
import { Route as MainServersIndexRouteImport } from "./routes/_main/servers/index";
import { Route as MainGroupsIndexRouteImport } from "./routes/_main/groups/index";
import { Route as MainServersServerIdRouteImport } from "./routes/_main/servers/$serverId";
import { Route as MainGroupsGroupIdRouteImport } from "./routes/_main/groups/$groupId";
import { Route as MainServersServerIdIndexRouteImport } from "./routes/_main/servers/$serverId/index";
import { Route as MainServersServerIdPlayersRouteImport } from "./routes/_main/servers/$serverId/players";
import { Route as MainServersServerIdFilesRouteImport } from "./routes/_main/servers/$serverId/files";
import { ServerRoute as ApiSplatServerRouteImport } from "./routes/api/$";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";

const rootServerRouteImport = createServerRootRoute();

const MainRoute = MainRouteImport.update({
  id: "/_main",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRouteImport,
} as any);
const MainIndexRoute = MainIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => MainRoute,
} as any);
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => AuthRoute,
} as any);
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRoute,
} as any);
const MainServersIndexRoute = MainServersIndexRouteImport.update({
  id: "/servers/",
  path: "/servers/",
  getParentRoute: () => MainRoute,
} as any);
const MainGroupsIndexRoute = MainGroupsIndexRouteImport.update({
  id: "/groups/",
  path: "/groups/",
  getParentRoute: () => MainRoute,
} as any);
const MainServersServerIdRoute = MainServersServerIdRouteImport.update({
  id: "/servers/$serverId",
  path: "/servers/$serverId",
  getParentRoute: () => MainRoute,
} as any);
const MainGroupsGroupIdRoute = MainGroupsGroupIdRouteImport.update({
  id: "/groups/$groupId",
  path: "/groups/$groupId",
  getParentRoute: () => MainRoute,
} as any);
const MainServersServerIdIndexRoute =
  MainServersServerIdIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => MainServersServerIdRoute,
  } as any);
const MainServersServerIdPlayersRoute =
  MainServersServerIdPlayersRouteImport.update({
    id: "/players",
    path: "/players",
    getParentRoute: () => MainServersServerIdRoute,
  } as any);
const MainServersServerIdFilesRoute =
  MainServersServerIdFilesRouteImport.update({
    id: "/files",
    path: "/files",
    getParentRoute: () => MainServersServerIdRoute,
  } as any);
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: "/api/$",
  path: "/api/$",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/login": typeof AuthLoginRoute;
  "/register": typeof AuthRegisterRoute;
  "/": typeof MainIndexRoute;
  "/groups/$groupId": typeof MainGroupsGroupIdRoute;
  "/servers/$serverId": typeof MainServersServerIdRouteWithChildren;
  "/groups": typeof MainGroupsIndexRoute;
  "/servers": typeof MainServersIndexRoute;
  "/servers/$serverId/files": typeof MainServersServerIdFilesRoute;
  "/servers/$serverId/players": typeof MainServersServerIdPlayersRoute;
  "/servers/$serverId/": typeof MainServersServerIdIndexRoute;
}
export interface FileRoutesByTo {
  "/login": typeof AuthLoginRoute;
  "/register": typeof AuthRegisterRoute;
  "/": typeof MainIndexRoute;
  "/groups/$groupId": typeof MainGroupsGroupIdRoute;
  "/groups": typeof MainGroupsIndexRoute;
  "/servers": typeof MainServersIndexRoute;
  "/servers/$serverId/files": typeof MainServersServerIdFilesRoute;
  "/servers/$serverId/players": typeof MainServersServerIdPlayersRoute;
  "/servers/$serverId": typeof MainServersServerIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_auth": typeof AuthRouteWithChildren;
  "/_main": typeof MainRouteWithChildren;
  "/_auth/login": typeof AuthLoginRoute;
  "/_auth/register": typeof AuthRegisterRoute;
  "/_main/": typeof MainIndexRoute;
  "/_main/groups/$groupId": typeof MainGroupsGroupIdRoute;
  "/_main/servers/$serverId": typeof MainServersServerIdRouteWithChildren;
  "/_main/groups/": typeof MainGroupsIndexRoute;
  "/_main/servers/": typeof MainServersIndexRoute;
  "/_main/servers/$serverId/files": typeof MainServersServerIdFilesRoute;
  "/_main/servers/$serverId/players": typeof MainServersServerIdPlayersRoute;
  "/_main/servers/$serverId/": typeof MainServersServerIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/login"
    | "/register"
    | "/"
    | "/groups/$groupId"
    | "/servers/$serverId"
    | "/groups"
    | "/servers"
    | "/servers/$serverId/files"
    | "/servers/$serverId/players"
    | "/servers/$serverId/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/login"
    | "/register"
    | "/"
    | "/groups/$groupId"
    | "/groups"
    | "/servers"
    | "/servers/$serverId/files"
    | "/servers/$serverId/players"
    | "/servers/$serverId";
  id:
    | "__root__"
    | "/_auth"
    | "/_main"
    | "/_auth/login"
    | "/_auth/register"
    | "/_main/"
    | "/_main/groups/$groupId"
    | "/_main/servers/$serverId"
    | "/_main/groups/"
    | "/_main/servers/"
    | "/_main/servers/$serverId/files"
    | "/_main/servers/$serverId/players"
    | "/_main/servers/$serverId/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
  MainRoute: typeof MainRouteWithChildren;
}
export interface FileServerRoutesByFullPath {
  "/api/$": typeof ApiSplatServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/$": typeof ApiSplatServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/$": typeof ApiSplatServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: "/api/$" | "/api/auth/$";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: "/api/$" | "/api/auth/$";
  id: "__root__" | "/api/$" | "/api/auth/$";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute;
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_main": {
      id: "/_main";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof MainRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_main/": {
      id: "/_main/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof MainIndexRouteImport;
      parentRoute: typeof MainRoute;
    };
    "/_auth/register": {
      id: "/_auth/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof AuthRegisterRouteImport;
      parentRoute: typeof AuthRoute;
    };
    "/_auth/login": {
      id: "/_auth/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof AuthLoginRouteImport;
      parentRoute: typeof AuthRoute;
    };
    "/_main/servers/": {
      id: "/_main/servers/";
      path: "/servers";
      fullPath: "/servers";
      preLoaderRoute: typeof MainServersIndexRouteImport;
      parentRoute: typeof MainRoute;
    };
    "/_main/groups/": {
      id: "/_main/groups/";
      path: "/groups";
      fullPath: "/groups";
      preLoaderRoute: typeof MainGroupsIndexRouteImport;
      parentRoute: typeof MainRoute;
    };
    "/_main/servers/$serverId": {
      id: "/_main/servers/$serverId";
      path: "/servers/$serverId";
      fullPath: "/servers/$serverId";
      preLoaderRoute: typeof MainServersServerIdRouteImport;
      parentRoute: typeof MainRoute;
    };
    "/_main/groups/$groupId": {
      id: "/_main/groups/$groupId";
      path: "/groups/$groupId";
      fullPath: "/groups/$groupId";
      preLoaderRoute: typeof MainGroupsGroupIdRouteImport;
      parentRoute: typeof MainRoute;
    };
    "/_main/servers/$serverId/": {
      id: "/_main/servers/$serverId/";
      path: "/";
      fullPath: "/servers/$serverId/";
      preLoaderRoute: typeof MainServersServerIdIndexRouteImport;
      parentRoute: typeof MainServersServerIdRoute;
    };
    "/_main/servers/$serverId/players": {
      id: "/_main/servers/$serverId/players";
      path: "/players";
      fullPath: "/servers/$serverId/players";
      preLoaderRoute: typeof MainServersServerIdPlayersRouteImport;
      parentRoute: typeof MainServersServerIdRoute;
    };
    "/_main/servers/$serverId/files": {
      id: "/_main/servers/$serverId/files";
      path: "/files";
      fullPath: "/servers/$serverId/files";
      preLoaderRoute: typeof MainServersServerIdFilesRouteImport;
      parentRoute: typeof MainServersServerIdRoute;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/$": {
      id: "/api/$";
      path: "/api/$";
      fullPath: "/api/$";
      preLoaderRoute: typeof ApiSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthRegisterRoute: typeof AuthRegisterRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

interface MainServersServerIdRouteChildren {
  MainServersServerIdFilesRoute: typeof MainServersServerIdFilesRoute;
  MainServersServerIdPlayersRoute: typeof MainServersServerIdPlayersRoute;
  MainServersServerIdIndexRoute: typeof MainServersServerIdIndexRoute;
}

const MainServersServerIdRouteChildren: MainServersServerIdRouteChildren = {
  MainServersServerIdFilesRoute: MainServersServerIdFilesRoute,
  MainServersServerIdPlayersRoute: MainServersServerIdPlayersRoute,
  MainServersServerIdIndexRoute: MainServersServerIdIndexRoute,
};

const MainServersServerIdRouteWithChildren =
  MainServersServerIdRoute._addFileChildren(MainServersServerIdRouteChildren);

interface MainRouteChildren {
  MainIndexRoute: typeof MainIndexRoute;
  MainGroupsGroupIdRoute: typeof MainGroupsGroupIdRoute;
  MainServersServerIdRoute: typeof MainServersServerIdRouteWithChildren;
  MainGroupsIndexRoute: typeof MainGroupsIndexRoute;
  MainServersIndexRoute: typeof MainServersIndexRoute;
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRoute: MainIndexRoute,
  MainGroupsGroupIdRoute: MainGroupsGroupIdRoute,
  MainServersServerIdRoute: MainServersServerIdRouteWithChildren,
  MainGroupsIndexRoute: MainGroupsIndexRoute,
  MainServersIndexRoute: MainServersIndexRoute,
};

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
